version: '3.1'

services:
  app:
    container_name: node_app
    build: 
      context: .
      dockerfile: ./docker/app/dockerfile
    networks: 
      - app-network
  nginx:
    image: nginx:alpine
    container_name: webserver_nginx
    # restart: unless-stopped
    tty: true
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.conf:/etc/nginx/sites-available/default
      # - ./docker/nginx/error/error.log:/var/log/nginx/error.log
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/lib/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/lib/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on: 
      - nginx
  db:
    container_name: mysql_db
    # image: mysql:5.7.22
    build:
      context: ./docker/mysql
      dockerfile: dockerfile
    # restart: always
    environment:
      MYSQL_ROOT_PASSWORD: jimmy
    volumes:
      - ./docker/volumes/mysql/database:/var/lib/mysql
      # - ./docker/mysql/initdb:/docker-entrypoint-initdb.d/:rw
    ports: 
      - 9874:3306
    networks:
      - app-network
#Docker Networks
networks:
  app-network:
    driver: bridge
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080